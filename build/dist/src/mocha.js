/// <reference path="../node_modules/@types/mocha/index.d.ts" />
/// <reference path="../node_modules/@types/chai/index.d.ts" />
const expect = chai.expect;
describe("my suite", function () {
    let XrmEx = parent.window.XrmEx;
    let Form = XrmEx.Form;
    let fields = {
        Firstname: new XrmEx.TextField("firstname"),
        Lastname: new XrmEx.TextField("lastname"),
        Jobtitle: new XrmEx.TextField("jobtitle"),
        Customer: new XrmEx.LookupField("parentcustomerid"),
    };
    it(`Test setting Field`, function () {
        fields.Firstname.Value = "Ahash";
        expect(fields.Firstname.Value).to.equal("Ahash");
    });
    it(`Test Action`, async function () {
        let response = await XrmEx.executeAction("theia_TestActionContact", [
            { Name: "Amount", Type: "Integer", Value: 5 },
            {
                Name: "Account",
                Type: "EntityReference",
                Value: fields.Customer.Value[0],
            },
        ], Form.entityReference);
        expect(response).to.have.property("Result").that.equals("Success");
    });
    it(`Test Notification`, async function () {
        let uniqueId = await XrmEx.addGlobalNotification("Test", "SUCCESS", true);
        expect(uniqueId).to.not.be.empty;
    });
    it(`Test AlertDialog`, async function () {
        let uniqueId = await XrmEx.openAlertDialog("Test", "Test message");
        expect(uniqueId).to.not.be.empty;
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jaGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9jaGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0VBQWdFO0FBQ2hFLCtEQUErRDtBQUMvRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzNCLFFBQVEsQ0FBQyxVQUFVLEVBQUU7SUFDbkIsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDaEMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUN0QixJQUFJLE1BQU0sR0FBRztRQUNYLFNBQVMsRUFBRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDO1FBQzNDLFFBQVEsRUFBRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQ3pDLFFBQVEsRUFBRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQ3pDLFFBQVEsRUFBRSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7S0FDcEQsQ0FBQztJQUNGLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRTtRQUN2QixNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7UUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyxhQUFhLEVBQUUsS0FBSztRQUNyQixJQUFJLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxhQUFhLENBQ3RDLHlCQUF5QixFQUN6QjtZQUNFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7WUFDN0M7Z0JBQ0UsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsSUFBSSxFQUFFLGlCQUFpQjtnQkFDdkIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNoQztTQUNGLEVBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FDckIsQ0FBQztRQUNGLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEtBQUs7UUFDM0IsSUFBSSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMscUJBQXFCLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLGtCQUFrQixFQUFFLEtBQUs7UUFDMUIsSUFBSSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNuRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vbm9kZV9tb2R1bGVzL0B0eXBlcy9tb2NoYS9pbmRleC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9ub2RlX21vZHVsZXMvQHR5cGVzL2NoYWkvaW5kZXguZC50c1wiIC8+XG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcbmRlc2NyaWJlKFwibXkgc3VpdGVcIiwgZnVuY3Rpb24gKCkge1xuICBsZXQgWHJtRXggPSBwYXJlbnQud2luZG93LlhybUV4O1xuICBsZXQgRm9ybSA9IFhybUV4LkZvcm07XG4gIGxldCBmaWVsZHMgPSB7XG4gICAgRmlyc3RuYW1lOiBuZXcgWHJtRXguVGV4dEZpZWxkKFwiZmlyc3RuYW1lXCIpLFxuICAgIExhc3RuYW1lOiBuZXcgWHJtRXguVGV4dEZpZWxkKFwibGFzdG5hbWVcIiksXG4gICAgSm9idGl0bGU6IG5ldyBYcm1FeC5UZXh0RmllbGQoXCJqb2J0aXRsZVwiKSxcbiAgICBDdXN0b21lcjogbmV3IFhybUV4Lkxvb2t1cEZpZWxkKFwicGFyZW50Y3VzdG9tZXJpZFwiKSxcbiAgfTtcbiAgaXQoYFRlc3Qgc2V0dGluZyBGaWVsZGAsIGZ1bmN0aW9uICgpIHtcbiAgICBmaWVsZHMuRmlyc3RuYW1lLlZhbHVlID0gXCJBaGFzaFwiO1xuICAgIGV4cGVjdChmaWVsZHMuRmlyc3RuYW1lLlZhbHVlKS50by5lcXVhbChcIkFoYXNoXCIpO1xuICB9KTtcbiAgaXQoYFRlc3QgQWN0aW9uYCwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IFhybUV4LmV4ZWN1dGVBY3Rpb24oXG4gICAgICBcInRoZWlhX1Rlc3RBY3Rpb25Db250YWN0XCIsXG4gICAgICBbXG4gICAgICAgIHsgTmFtZTogXCJBbW91bnRcIiwgVHlwZTogXCJJbnRlZ2VyXCIsIFZhbHVlOiA1IH0sXG4gICAgICAgIHtcbiAgICAgICAgICBOYW1lOiBcIkFjY291bnRcIixcbiAgICAgICAgICBUeXBlOiBcIkVudGl0eVJlZmVyZW5jZVwiLFxuICAgICAgICAgIFZhbHVlOiBmaWVsZHMuQ3VzdG9tZXIuVmFsdWVbMF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgRm9ybS5lbnRpdHlSZWZlcmVuY2VcbiAgICApO1xuICAgIGV4cGVjdChyZXNwb25zZSkudG8uaGF2ZS5wcm9wZXJ0eShcIlJlc3VsdFwiKS50aGF0LmVxdWFscyhcIlN1Y2Nlc3NcIik7XG4gIH0pO1xuICBpdChgVGVzdCBOb3RpZmljYXRpb25gLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHVuaXF1ZUlkID0gYXdhaXQgWHJtRXguYWRkR2xvYmFsTm90aWZpY2F0aW9uKFwiVGVzdFwiLCBcIlNVQ0NFU1NcIiwgdHJ1ZSk7XG4gICAgZXhwZWN0KHVuaXF1ZUlkKS50by5ub3QuYmUuZW1wdHk7XG4gIH0pO1xuICBpdChgVGVzdCBBbGVydERpYWxvZ2AsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgdW5pcXVlSWQgPSBhd2FpdCBYcm1FeC5vcGVuQWxlcnREaWFsb2coXCJUZXN0XCIsIFwiVGVzdCBtZXNzYWdlXCIpO1xuICAgIGV4cGVjdCh1bmlxdWVJZCkudG8ubm90LmJlLmVtcHR5O1xuICB9KTtcbn0pO1xuIl19